{"ast":null,"code":"// User.js\nconst mongoose = require(\"mongoose\");\n\n// Определение схемы данных для пользователей\nconst userSchema = new mongoose.Schema({\n  username: String,\n  email: String,\n  password: String,\n  avatar: {\n    type: String,\n    default: \"../resources/images/test_avatar.jpg\" // Путь к изображению по умолчанию\n  }\n});\n\nuserSchema.methods.getAvatar = function () {\n  return this.avatar;\n};\n\n// Создание модели для пользователей\nconst User = mongoose.model(\"User\", userSchema);\nmodule.exports = User;","map":{"version":3,"names":["mongoose","require","userSchema","Schema","username","String","email","password","avatar","type","default","methods","getAvatar","User","model","module","exports"],"sources":["D:/WebChat/src/db_stuff/User.js"],"sourcesContent":["// User.js\r\nconst mongoose = require(\"mongoose\");\r\n\r\n// Определение схемы данных для пользователей\r\nconst userSchema = new mongoose.Schema({\r\n  username: String,\r\n  email: String,\r\n  password: String,\r\n  avatar: {\r\n    type: String,\r\n    default: \"../resources/images/test_avatar.jpg\", // Путь к изображению по умолчанию\r\n  },\r\n});\r\n\r\nuserSchema.methods.getAvatar = function() {\r\n  return this.avatar;\r\n};\r\n\r\n// Создание модели для пользователей\r\nconst User = mongoose.model(\"User\", userSchema);\r\n\r\nmodule.exports = User;\r\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;;AAEpC;AACA,MAAMC,UAAU,GAAG,IAAIF,QAAQ,CAACG,MAAM,CAAC;EACrCC,QAAQ,EAAEC,MAAM;EAChBC,KAAK,EAAED,MAAM;EACbE,QAAQ,EAAEF,MAAM;EAChBG,MAAM,EAAE;IACNC,IAAI,EAAEJ,MAAM;IACZK,OAAO,EAAE,qCAAqC,CAAE;EAClD;AACF,CAAC,CAAC;;AAEFR,UAAU,CAACS,OAAO,CAACC,SAAS,GAAG,YAAW;EACxC,OAAO,IAAI,CAACJ,MAAM;AACpB,CAAC;;AAED;AACA,MAAMK,IAAI,GAAGb,QAAQ,CAACc,KAAK,CAAC,MAAM,EAAEZ,UAAU,CAAC;AAE/Ca,MAAM,CAACC,OAAO,GAAGH,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}