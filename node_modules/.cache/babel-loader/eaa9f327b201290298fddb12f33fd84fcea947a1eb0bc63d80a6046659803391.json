{"ast":null,"code":"async function checkLoginData(event) {\n  event.preventDefault();\n  const form = document.getElementById(\"log_in_form\");\n  const formData = new FormData(form);\n  const username = formData.get(\"username\");\n  const password = formData.get(\"password\");\n  try {\n    console.log(username, password);\n    const response = await fetch(\"http://localhost:5000/check\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (response.ok) {\n      const user = await response.json();\n      if (user) {\n        console.log('Пользователь найден:', user);\n        const success_notification = document.createElement(\"div\");\n        const success_message = document.createTextNode(\"Log in successful!\");\n\n        // Добавляем элемент на страницу\n        document.body.appendChild(success_notification);\n\n        // Добавляем класс \"error\" к элементу\n        success_notification.classList.add(\"success_notification\");\n\n        // После того, как элемент добавлен на страницу, добавляем классы анимации\n        success_notification.classList.add('magictime', 'tinUpIn');\n        success_notification.appendChild(success_message);\n        return true;\n      } else {\n        console.log('Пользователь не найден');\n        // Пользователь не найден, выполняйте нужные действия\n      }\n    } else {\n      console.error('Ошибка при запросе:', response.statusText);\n      // Обработка ошибки при запросе\n    }\n  } catch (error) {\n    console.error('Ошибка при поиске пользователя:', error);\n    // Обработка ошибки\n  }\n}\n\nexport default checkLoginData;","map":{"version":3,"names":["checkLoginData","event","preventDefault","form","document","getElementById","formData","FormData","username","get","password","console","log","response","fetch","method","headers","body","JSON","stringify","ok","user","json","success_notification","createElement","success_message","createTextNode","appendChild","classList","add","error","statusText"],"sources":["D:/WebChat/src/utils/checkLoginData.js"],"sourcesContent":["\r\n\r\nasync function checkLoginData(event) {\r\n    event.preventDefault();\r\n\r\n    const form = document.getElementById(\"log_in_form\");\r\n    const formData = new FormData(form);\r\n\r\n    const username = formData.get(\"username\");\r\n    const password = formData.get(\"password\");\r\n\r\n    try {\r\n        console.log(username, password);\r\n        const response = await fetch(\"http://localhost:5000/check\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ username, password }),\r\n        });\r\n\r\n        if (response.ok) {\r\n            const user = await response.json();\r\n\r\n            if (user) {\r\n                console.log('Пользователь найден:', user);\r\n                const success_notification = document.createElement(\"div\");\r\n                const success_message = document.createTextNode(\"Log in successful!\");\r\n\r\n                // Добавляем элемент на страницу\r\n                document.body.appendChild(success_notification);\r\n\r\n                // Добавляем класс \"error\" к элементу\r\n                success_notification.classList.add(\"success_notification\");\r\n\r\n                // После того, как элемент добавлен на страницу, добавляем классы анимации\r\n                success_notification.classList.add('magictime', 'tinUpIn');\r\n\r\n                success_notification.appendChild(success_message);\r\n                return true;\r\n            } else {\r\n                console.log('Пользователь не найден');\r\n                // Пользователь не найден, выполняйте нужные действия\r\n            }\r\n        } else {\r\n            console.error('Ошибка при запросе:', response.statusText);\r\n            // Обработка ошибки при запросе\r\n        }\r\n    } catch (error) {\r\n        console.error('Ошибка при поиске пользователя:', error);\r\n        // Обработка ошибки\r\n    }\r\n}\r\n\r\n\r\nexport default checkLoginData;"],"mappings":"AAEA,eAAeA,cAAcA,CAACC,KAAK,EAAE;EACjCA,KAAK,CAACC,cAAc,CAAC,CAAC;EAEtB,MAAMC,IAAI,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;EACnD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAACJ,IAAI,CAAC;EAEnC,MAAMK,QAAQ,GAAGF,QAAQ,CAACG,GAAG,CAAC,UAAU,CAAC;EACzC,MAAMC,QAAQ,GAAGJ,QAAQ,CAACG,GAAG,CAAC,UAAU,CAAC;EAEzC,IAAI;IACAE,OAAO,CAACC,GAAG,CAACJ,QAAQ,EAAEE,QAAQ,CAAC;IAC/B,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MACxDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEX,QAAQ;QAAEE;MAAS,CAAC;IAC/C,CAAC,CAAC;IAEF,IAAIG,QAAQ,CAACO,EAAE,EAAE;MACb,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,EAAE;QACNV,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAES,IAAI,CAAC;QACzC,MAAME,oBAAoB,GAAGnB,QAAQ,CAACoB,aAAa,CAAC,KAAK,CAAC;QAC1D,MAAMC,eAAe,GAAGrB,QAAQ,CAACsB,cAAc,CAAC,oBAAoB,CAAC;;QAErE;QACAtB,QAAQ,CAACa,IAAI,CAACU,WAAW,CAACJ,oBAAoB,CAAC;;QAE/C;QACAA,oBAAoB,CAACK,SAAS,CAACC,GAAG,CAAC,sBAAsB,CAAC;;QAE1D;QACAN,oBAAoB,CAACK,SAAS,CAACC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC;QAE1DN,oBAAoB,CAACI,WAAW,CAACF,eAAe,CAAC;QACjD,OAAO,IAAI;MACf,CAAC,MAAM;QACHd,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrC;MACJ;IACJ,CAAC,MAAM;MACHD,OAAO,CAACmB,KAAK,CAAC,qBAAqB,EAAEjB,QAAQ,CAACkB,UAAU,CAAC;MACzD;IACJ;EACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;IACZnB,OAAO,CAACmB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD;EACJ;AACJ;;AAGA,eAAe9B,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}