{"ast":null,"code":"const mongoose = require('mongoose');\nconst {\n  MongoClient,\n  ServerApiVersion\n} = require('mongodb');\nconst uri = \"mongodb+srv://first_user:1111@cluster0.jtz9col.mongodb.net/?retryWrites=true&w=majority\";\n// Create a MongoClient with a MongoClientOptions object to set the Stable API version\nconst client = new MongoClient(uri, {\n  serverApi: {\n    version: ServerApiVersion.v1,\n    strict: true,\n    deprecationErrors: true\n  }\n});\nasync function run() {\n  try {\n    // Connect the client to the server\t(optional starting in v4.7)\n    await client.connect();\n    // Send a ping to confirm a successful connection\n    await client.db(\"admin\").command({\n      ping: 1\n    });\n    console.log(\"Pinged your deployment. You successfully connected to MongoDB!\");\n  } finally {\n    // Ensures that the client will close when you finish/error\n    await client.close();\n  }\n}\nrun().catch(console.dir);\nmongoose.connect(uri, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});","map":{"version":3,"names":["mongoose","require","MongoClient","ServerApiVersion","uri","client","serverApi","version","v1","strict","deprecationErrors","run","connect","db","command","ping","console","log","close","catch","dir","useNewUrlParser","useUnifiedTopology"],"sources":["D:/WebChat/src/db_stuff/database.js"],"sourcesContent":["const mongoose = require('mongoose');\r\nconst { MongoClient, ServerApiVersion } = require('mongodb');\r\nconst uri = \"mongodb+srv://first_user:1111@cluster0.jtz9col.mongodb.net/?retryWrites=true&w=majority\";\r\n// Create a MongoClient with a MongoClientOptions object to set the Stable API version\r\nconst client = new MongoClient(uri, {\r\n    serverApi: {\r\n        version: ServerApiVersion.v1,\r\n        strict: true,\r\n        deprecationErrors: true,\r\n    }\r\n});\r\n\r\nasync function run() {\r\n    try {\r\n        // Connect the client to the server\t(optional starting in v4.7)\r\n        await client.connect();\r\n        // Send a ping to confirm a successful connection\r\n        await client.db(\"admin\").command({ ping: 1 });\r\n        console.log(\"Pinged your deployment. You successfully connected to MongoDB!\");\r\n    } finally {\r\n        // Ensures that the client will close when you finish/error\r\n        await client.close();\r\n    }\r\n}\r\nrun().catch(console.dir);\r\n\r\nmongoose.connect(uri, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n});\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAM;EAAEC,WAAW;EAAEC;AAAiB,CAAC,GAAGF,OAAO,CAAC,SAAS,CAAC;AAC5D,MAAMG,GAAG,GAAG,yFAAyF;AACrG;AACA,MAAMC,MAAM,GAAG,IAAIH,WAAW,CAACE,GAAG,EAAE;EAChCE,SAAS,EAAE;IACPC,OAAO,EAAEJ,gBAAgB,CAACK,EAAE;IAC5BC,MAAM,EAAE,IAAI;IACZC,iBAAiB,EAAE;EACvB;AACJ,CAAC,CAAC;AAEF,eAAeC,GAAGA,CAAA,EAAG;EACjB,IAAI;IACA;IACA,MAAMN,MAAM,CAACO,OAAO,CAAC,CAAC;IACtB;IACA,MAAMP,MAAM,CAACQ,EAAE,CAAC,OAAO,CAAC,CAACC,OAAO,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC,CAAC;IAC7CC,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;EACjF,CAAC,SAAS;IACN;IACA,MAAMZ,MAAM,CAACa,KAAK,CAAC,CAAC;EACxB;AACJ;AACAP,GAAG,CAAC,CAAC,CAACQ,KAAK,CAACH,OAAO,CAACI,GAAG,CAAC;AAExBpB,QAAQ,CAACY,OAAO,CAACR,GAAG,EAAE;EAClBiB,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACxB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}